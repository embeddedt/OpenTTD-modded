/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_tilelist.hpp"

namespace SQConvert {
	/* Allow ScriptTileList to be used as Squirrel parameter */
	template <> struct Param<ScriptTileList *> { static inline ScriptTileList *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptTileList *)instance; } };
	template <> struct Param<ScriptTileList &> { static inline ScriptTileList &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptTileList *)instance; } };
	template <> struct Param<const ScriptTileList *> { static inline const ScriptTileList *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptTileList *)instance; } };
	template <> struct Param<const ScriptTileList &> { static inline const ScriptTileList &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptTileList *)instance; } };
	template <> struct Return<ScriptTileList *> { static inline int Set(HSQUIRRELVM vm, ScriptTileList *res) { if (res == nullptr) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "TileList", res, nullptr, DefSQDestructorCallback<ScriptTileList>, true); return 1; } };
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptTileList_IndustryAccepting to be used as Squirrel parameter */
	template <> struct Param<ScriptTileList_IndustryAccepting *> { static inline ScriptTileList_IndustryAccepting *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptTileList_IndustryAccepting *)instance; } };
	template <> struct Param<ScriptTileList_IndustryAccepting &> { static inline ScriptTileList_IndustryAccepting &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptTileList_IndustryAccepting *)instance; } };
	template <> struct Param<const ScriptTileList_IndustryAccepting *> { static inline const ScriptTileList_IndustryAccepting *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptTileList_IndustryAccepting *)instance; } };
	template <> struct Param<const ScriptTileList_IndustryAccepting &> { static inline const ScriptTileList_IndustryAccepting &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptTileList_IndustryAccepting *)instance; } };
	template <> struct Return<ScriptTileList_IndustryAccepting *> { static inline int Set(HSQUIRRELVM vm, ScriptTileList_IndustryAccepting *res) { if (res == nullptr) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "TileList_IndustryAccepting", res, nullptr, DefSQDestructorCallback<ScriptTileList_IndustryAccepting>, true); return 1; } };
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptTileList_IndustryProducing to be used as Squirrel parameter */
	template <> struct Param<ScriptTileList_IndustryProducing *> { static inline ScriptTileList_IndustryProducing *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptTileList_IndustryProducing *)instance; } };
	template <> struct Param<ScriptTileList_IndustryProducing &> { static inline ScriptTileList_IndustryProducing &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptTileList_IndustryProducing *)instance; } };
	template <> struct Param<const ScriptTileList_IndustryProducing *> { static inline const ScriptTileList_IndustryProducing *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptTileList_IndustryProducing *)instance; } };
	template <> struct Param<const ScriptTileList_IndustryProducing &> { static inline const ScriptTileList_IndustryProducing &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptTileList_IndustryProducing *)instance; } };
	template <> struct Return<ScriptTileList_IndustryProducing *> { static inline int Set(HSQUIRRELVM vm, ScriptTileList_IndustryProducing *res) { if (res == nullptr) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "TileList_IndustryProducing", res, nullptr, DefSQDestructorCallback<ScriptTileList_IndustryProducing>, true); return 1; } };
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptTileList_StationType to be used as Squirrel parameter */
	template <> struct Param<ScriptTileList_StationType *> { static inline ScriptTileList_StationType *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptTileList_StationType *)instance; } };
	template <> struct Param<ScriptTileList_StationType &> { static inline ScriptTileList_StationType &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptTileList_StationType *)instance; } };
	template <> struct Param<const ScriptTileList_StationType *> { static inline const ScriptTileList_StationType *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptTileList_StationType *)instance; } };
	template <> struct Param<const ScriptTileList_StationType &> { static inline const ScriptTileList_StationType &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptTileList_StationType *)instance; } };
	template <> struct Return<ScriptTileList_StationType *> { static inline int Set(HSQUIRRELVM vm, ScriptTileList_StationType *res) { if (res == nullptr) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "TileList_StationType", res, nullptr, DefSQDestructorCallback<ScriptTileList_StationType>, true); return 1; } };
} // namespace SQConvert
