/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_tile.hpp"

namespace SQConvert {
	/* Allow enums to be used as Squirrel parameters */
	template <> struct Param<ScriptTile::ErrorMessages> { static inline ScriptTile::ErrorMessages Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQInteger tmp; sq_getinteger(vm, index, &tmp); return (ScriptTile::ErrorMessages)tmp; } };
	template <> struct Return<ScriptTile::ErrorMessages> { static inline int Set(HSQUIRRELVM vm, ScriptTile::ErrorMessages res) { sq_pushinteger(vm, res); return 1; } };
	template <> struct Param<ScriptTile::Corner> { static inline ScriptTile::Corner Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQInteger tmp; sq_getinteger(vm, index, &tmp); return (ScriptTile::Corner)tmp; } };
	template <> struct Return<ScriptTile::Corner> { static inline int Set(HSQUIRRELVM vm, ScriptTile::Corner res) { sq_pushinteger(vm, res); return 1; } };
	template <> struct Param<ScriptTile::Slope> { static inline ScriptTile::Slope Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQInteger tmp; sq_getinteger(vm, index, &tmp); return (ScriptTile::Slope)tmp; } };
	template <> struct Return<ScriptTile::Slope> { static inline int Set(HSQUIRRELVM vm, ScriptTile::Slope res) { sq_pushinteger(vm, res); return 1; } };
	template <> struct Param<ScriptTile::TransportType> { static inline ScriptTile::TransportType Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQInteger tmp; sq_getinteger(vm, index, &tmp); return (ScriptTile::TransportType)tmp; } };
	template <> struct Return<ScriptTile::TransportType> { static inline int Set(HSQUIRRELVM vm, ScriptTile::TransportType res) { sq_pushinteger(vm, res); return 1; } };
	template <> struct Param<ScriptTile::BuildType> { static inline ScriptTile::BuildType Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQInteger tmp; sq_getinteger(vm, index, &tmp); return (ScriptTile::BuildType)tmp; } };
	template <> struct Return<ScriptTile::BuildType> { static inline int Set(HSQUIRRELVM vm, ScriptTile::BuildType res) { sq_pushinteger(vm, res); return 1; } };
	template <> struct Param<ScriptTile::TerrainType> { static inline ScriptTile::TerrainType Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQInteger tmp; sq_getinteger(vm, index, &tmp); return (ScriptTile::TerrainType)tmp; } };
	template <> struct Return<ScriptTile::TerrainType> { static inline int Set(HSQUIRRELVM vm, ScriptTile::TerrainType res) { sq_pushinteger(vm, res); return 1; } };

	/* Allow ScriptTile to be used as Squirrel parameter */
	template <> struct Param<ScriptTile *> { static inline ScriptTile *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptTile *)instance; } };
	template <> struct Param<ScriptTile &> { static inline ScriptTile &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptTile *)instance; } };
	template <> struct Param<const ScriptTile *> { static inline const ScriptTile *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptTile *)instance; } };
	template <> struct Param<const ScriptTile &> { static inline const ScriptTile &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptTile *)instance; } };
	template <> struct Return<ScriptTile *> { static inline int Set(HSQUIRRELVM vm, ScriptTile *res) { if (res == nullptr) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "Tile", res, nullptr, DefSQDestructorCallback<ScriptTile>, true); return 1; } };
} // namespace SQConvert
