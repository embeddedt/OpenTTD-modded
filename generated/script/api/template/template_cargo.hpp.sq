/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_cargo.hpp"

namespace SQConvert {
	/* Allow enums to be used as Squirrel parameters */
	template <> struct Param<ScriptCargo::CargoClass> { static inline ScriptCargo::CargoClass Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQInteger tmp; sq_getinteger(vm, index, &tmp); return (ScriptCargo::CargoClass)tmp; } };
	template <> struct Return<ScriptCargo::CargoClass> { static inline int Set(HSQUIRRELVM vm, ScriptCargo::CargoClass res) { sq_pushinteger(vm, res); return 1; } };
	template <> struct Param<ScriptCargo::TownEffect> { static inline ScriptCargo::TownEffect Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQInteger tmp; sq_getinteger(vm, index, &tmp); return (ScriptCargo::TownEffect)tmp; } };
	template <> struct Return<ScriptCargo::TownEffect> { static inline int Set(HSQUIRRELVM vm, ScriptCargo::TownEffect res) { sq_pushinteger(vm, res); return 1; } };
	template <> struct Param<ScriptCargo::SpecialCargoID> { static inline ScriptCargo::SpecialCargoID Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQInteger tmp; sq_getinteger(vm, index, &tmp); return (ScriptCargo::SpecialCargoID)tmp; } };
	template <> struct Return<ScriptCargo::SpecialCargoID> { static inline int Set(HSQUIRRELVM vm, ScriptCargo::SpecialCargoID res) { sq_pushinteger(vm, res); return 1; } };
	template <> struct Param<ScriptCargo::DistributionType> { static inline ScriptCargo::DistributionType Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQInteger tmp; sq_getinteger(vm, index, &tmp); return (ScriptCargo::DistributionType)tmp; } };
	template <> struct Return<ScriptCargo::DistributionType> { static inline int Set(HSQUIRRELVM vm, ScriptCargo::DistributionType res) { sq_pushinteger(vm, res); return 1; } };

	/* Allow ScriptCargo to be used as Squirrel parameter */
	template <> struct Param<ScriptCargo *> { static inline ScriptCargo *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptCargo *)instance; } };
	template <> struct Param<ScriptCargo &> { static inline ScriptCargo &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptCargo *)instance; } };
	template <> struct Param<const ScriptCargo *> { static inline const ScriptCargo *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptCargo *)instance; } };
	template <> struct Param<const ScriptCargo &> { static inline const ScriptCargo &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptCargo *)instance; } };
	template <> struct Return<ScriptCargo *> { static inline int Set(HSQUIRRELVM vm, ScriptCargo *res) { if (res == nullptr) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "Cargo", res, nullptr, DefSQDestructorCallback<ScriptCargo>, true); return 1; } };
} // namespace SQConvert
