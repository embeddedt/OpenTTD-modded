/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_goal.hpp"

namespace SQConvert {
	/* Allow enums to be used as Squirrel parameters */
	template <> struct Param<ScriptGoal::GoalID> { static inline ScriptGoal::GoalID Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQInteger tmp; sq_getinteger(vm, index, &tmp); return (ScriptGoal::GoalID)tmp; } };
	template <> struct Return<ScriptGoal::GoalID> { static inline int Set(HSQUIRRELVM vm, ScriptGoal::GoalID res) { sq_pushinteger(vm, res); return 1; } };
	template <> struct Param<ScriptGoal::GoalType> { static inline ScriptGoal::GoalType Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQInteger tmp; sq_getinteger(vm, index, &tmp); return (ScriptGoal::GoalType)tmp; } };
	template <> struct Return<ScriptGoal::GoalType> { static inline int Set(HSQUIRRELVM vm, ScriptGoal::GoalType res) { sq_pushinteger(vm, res); return 1; } };
	template <> struct Param<ScriptGoal::QuestionType> { static inline ScriptGoal::QuestionType Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQInteger tmp; sq_getinteger(vm, index, &tmp); return (ScriptGoal::QuestionType)tmp; } };
	template <> struct Return<ScriptGoal::QuestionType> { static inline int Set(HSQUIRRELVM vm, ScriptGoal::QuestionType res) { sq_pushinteger(vm, res); return 1; } };
	template <> struct Param<ScriptGoal::QuestionButton> { static inline ScriptGoal::QuestionButton Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQInteger tmp; sq_getinteger(vm, index, &tmp); return (ScriptGoal::QuestionButton)tmp; } };
	template <> struct Return<ScriptGoal::QuestionButton> { static inline int Set(HSQUIRRELVM vm, ScriptGoal::QuestionButton res) { sq_pushinteger(vm, res); return 1; } };

	/* Allow ScriptGoal to be used as Squirrel parameter */
	template <> struct Param<ScriptGoal *> { static inline ScriptGoal *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptGoal *)instance; } };
	template <> struct Param<ScriptGoal &> { static inline ScriptGoal &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptGoal *)instance; } };
	template <> struct Param<const ScriptGoal *> { static inline const ScriptGoal *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptGoal *)instance; } };
	template <> struct Param<const ScriptGoal &> { static inline const ScriptGoal &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptGoal *)instance; } };
	template <> struct Return<ScriptGoal *> { static inline int Set(HSQUIRRELVM vm, ScriptGoal *res) { if (res == nullptr) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "Goal", res, nullptr, DefSQDestructorCallback<ScriptGoal>, true); return 1; } };
} // namespace SQConvert
