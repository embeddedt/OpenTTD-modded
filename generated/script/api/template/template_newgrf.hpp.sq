/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_newgrf.hpp"

namespace SQConvert {
	/* Allow ScriptNewGRFList to be used as Squirrel parameter */
	template <> inline ScriptNewGRFList *GetParam(ForceType<ScriptNewGRFList *>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptNewGRFList *)instance; }
	template <> inline ScriptNewGRFList &GetParam(ForceType<ScriptNewGRFList &>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptNewGRFList *)instance; }
	template <> inline const ScriptNewGRFList *GetParam(ForceType<const ScriptNewGRFList *>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptNewGRFList *)instance; }
	template <> inline const ScriptNewGRFList &GetParam(ForceType<const ScriptNewGRFList &>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptNewGRFList *)instance; }
	template <> inline int Return<ScriptNewGRFList *>(HSQUIRRELVM vm, ScriptNewGRFList *res) { if (res == nullptr) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "NewGRFList", res, nullptr, DefSQDestructorCallback<ScriptNewGRFList>, true); return 1; }
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptNewGRF to be used as Squirrel parameter */
	template <> inline ScriptNewGRF *GetParam(ForceType<ScriptNewGRF *>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptNewGRF *)instance; }
	template <> inline ScriptNewGRF &GetParam(ForceType<ScriptNewGRF &>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptNewGRF *)instance; }
	template <> inline const ScriptNewGRF *GetParam(ForceType<const ScriptNewGRF *>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptNewGRF *)instance; }
	template <> inline const ScriptNewGRF &GetParam(ForceType<const ScriptNewGRF &>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptNewGRF *)instance; }
	template <> inline int Return<ScriptNewGRF *>(HSQUIRRELVM vm, ScriptNewGRF *res) { if (res == nullptr) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "NewGRF", res, nullptr, DefSQDestructorCallback<ScriptNewGRF>, true); return 1; }
} // namespace SQConvert
