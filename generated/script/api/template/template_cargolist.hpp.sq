/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_cargolist.hpp"

namespace SQConvert {
	/* Allow ScriptCargoList to be used as Squirrel parameter */
	template <> struct Param<ScriptCargoList *> { static inline ScriptCargoList *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptCargoList *)instance; } };
	template <> struct Param<ScriptCargoList &> { static inline ScriptCargoList &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptCargoList *)instance; } };
	template <> struct Param<const ScriptCargoList *> { static inline const ScriptCargoList *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptCargoList *)instance; } };
	template <> struct Param<const ScriptCargoList &> { static inline const ScriptCargoList &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptCargoList *)instance; } };
	template <> struct Return<ScriptCargoList *> { static inline int Set(HSQUIRRELVM vm, ScriptCargoList *res) { if (res == nullptr) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "CargoList", res, nullptr, DefSQDestructorCallback<ScriptCargoList>, true); return 1; } };
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptCargoList_IndustryAccepting to be used as Squirrel parameter */
	template <> struct Param<ScriptCargoList_IndustryAccepting *> { static inline ScriptCargoList_IndustryAccepting *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptCargoList_IndustryAccepting *)instance; } };
	template <> struct Param<ScriptCargoList_IndustryAccepting &> { static inline ScriptCargoList_IndustryAccepting &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptCargoList_IndustryAccepting *)instance; } };
	template <> struct Param<const ScriptCargoList_IndustryAccepting *> { static inline const ScriptCargoList_IndustryAccepting *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptCargoList_IndustryAccepting *)instance; } };
	template <> struct Param<const ScriptCargoList_IndustryAccepting &> { static inline const ScriptCargoList_IndustryAccepting &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptCargoList_IndustryAccepting *)instance; } };
	template <> struct Return<ScriptCargoList_IndustryAccepting *> { static inline int Set(HSQUIRRELVM vm, ScriptCargoList_IndustryAccepting *res) { if (res == nullptr) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "CargoList_IndustryAccepting", res, nullptr, DefSQDestructorCallback<ScriptCargoList_IndustryAccepting>, true); return 1; } };
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptCargoList_IndustryProducing to be used as Squirrel parameter */
	template <> struct Param<ScriptCargoList_IndustryProducing *> { static inline ScriptCargoList_IndustryProducing *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptCargoList_IndustryProducing *)instance; } };
	template <> struct Param<ScriptCargoList_IndustryProducing &> { static inline ScriptCargoList_IndustryProducing &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptCargoList_IndustryProducing *)instance; } };
	template <> struct Param<const ScriptCargoList_IndustryProducing *> { static inline const ScriptCargoList_IndustryProducing *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptCargoList_IndustryProducing *)instance; } };
	template <> struct Param<const ScriptCargoList_IndustryProducing &> { static inline const ScriptCargoList_IndustryProducing &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptCargoList_IndustryProducing *)instance; } };
	template <> struct Return<ScriptCargoList_IndustryProducing *> { static inline int Set(HSQUIRRELVM vm, ScriptCargoList_IndustryProducing *res) { if (res == nullptr) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "CargoList_IndustryProducing", res, nullptr, DefSQDestructorCallback<ScriptCargoList_IndustryProducing>, true); return 1; } };
} // namespace SQConvert

namespace SQConvert {
	/* Allow ScriptCargoList_StationAccepting to be used as Squirrel parameter */
	template <> struct Param<ScriptCargoList_StationAccepting *> { static inline ScriptCargoList_StationAccepting *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptCargoList_StationAccepting *)instance; } };
	template <> struct Param<ScriptCargoList_StationAccepting &> { static inline ScriptCargoList_StationAccepting &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptCargoList_StationAccepting *)instance; } };
	template <> struct Param<const ScriptCargoList_StationAccepting *> { static inline const ScriptCargoList_StationAccepting *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptCargoList_StationAccepting *)instance; } };
	template <> struct Param<const ScriptCargoList_StationAccepting &> { static inline const ScriptCargoList_StationAccepting &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptCargoList_StationAccepting *)instance; } };
	template <> struct Return<ScriptCargoList_StationAccepting *> { static inline int Set(HSQUIRRELVM vm, ScriptCargoList_StationAccepting *res) { if (res == nullptr) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "CargoList_StationAccepting", res, nullptr, DefSQDestructorCallback<ScriptCargoList_StationAccepting>, true); return 1; } };
} // namespace SQConvert
