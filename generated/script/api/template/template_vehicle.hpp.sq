/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_vehicle.hpp"

namespace SQConvert {
	/* Allow enums to be used as Squirrel parameters */
	template <> struct Param<ScriptVehicle::ErrorMessages> { static inline ScriptVehicle::ErrorMessages Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQInteger tmp; sq_getinteger(vm, index, &tmp); return (ScriptVehicle::ErrorMessages)tmp; } };
	template <> struct Return<ScriptVehicle::ErrorMessages> { static inline int Set(HSQUIRRELVM vm, ScriptVehicle::ErrorMessages res) { sq_pushinteger(vm, res); return 1; } };
	template <> struct Param<ScriptVehicle::VehicleType> { static inline ScriptVehicle::VehicleType Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQInteger tmp; sq_getinteger(vm, index, &tmp); return (ScriptVehicle::VehicleType)tmp; } };
	template <> struct Return<ScriptVehicle::VehicleType> { static inline int Set(HSQUIRRELVM vm, ScriptVehicle::VehicleType res) { sq_pushinteger(vm, res); return 1; } };
	template <> struct Param<ScriptVehicle::VehicleState> { static inline ScriptVehicle::VehicleState Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQInteger tmp; sq_getinteger(vm, index, &tmp); return (ScriptVehicle::VehicleState)tmp; } };
	template <> struct Return<ScriptVehicle::VehicleState> { static inline int Set(HSQUIRRELVM vm, ScriptVehicle::VehicleState res) { sq_pushinteger(vm, res); return 1; } };

	/* Allow ScriptVehicle to be used as Squirrel parameter */
	template <> struct Param<ScriptVehicle *> { static inline ScriptVehicle *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptVehicle *)instance; } };
	template <> struct Param<ScriptVehicle &> { static inline ScriptVehicle &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptVehicle *)instance; } };
	template <> struct Param<const ScriptVehicle *> { static inline const ScriptVehicle *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptVehicle *)instance; } };
	template <> struct Param<const ScriptVehicle &> { static inline const ScriptVehicle &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptVehicle *)instance; } };
	template <> struct Return<ScriptVehicle *> { static inline int Set(HSQUIRRELVM vm, ScriptVehicle *res) { if (res == nullptr) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "Vehicle", res, nullptr, DefSQDestructorCallback<ScriptVehicle>, true); return 1; } };
} // namespace SQConvert
