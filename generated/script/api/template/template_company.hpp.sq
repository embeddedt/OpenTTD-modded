/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_company.hpp"

namespace SQConvert {
	/* Allow enums to be used as Squirrel parameters */
	template <> struct Param<ScriptCompany::Quarter> { static inline ScriptCompany::Quarter Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQInteger tmp; sq_getinteger(vm, index, &tmp); return (ScriptCompany::Quarter)tmp; } };
	template <> struct Return<ScriptCompany::Quarter> { static inline int Set(HSQUIRRELVM vm, ScriptCompany::Quarter res) { sq_pushinteger(vm, res); return 1; } };
	template <> struct Param<ScriptCompany::CompanyID> { static inline ScriptCompany::CompanyID Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQInteger tmp; sq_getinteger(vm, index, &tmp); return (ScriptCompany::CompanyID)tmp; } };
	template <> struct Return<ScriptCompany::CompanyID> { static inline int Set(HSQUIRRELVM vm, ScriptCompany::CompanyID res) { sq_pushinteger(vm, res); return 1; } };
	template <> struct Param<ScriptCompany::Gender> { static inline ScriptCompany::Gender Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQInteger tmp; sq_getinteger(vm, index, &tmp); return (ScriptCompany::Gender)tmp; } };
	template <> struct Return<ScriptCompany::Gender> { static inline int Set(HSQUIRRELVM vm, ScriptCompany::Gender res) { sq_pushinteger(vm, res); return 1; } };
	template <> struct Param<ScriptCompany::LiveryScheme> { static inline ScriptCompany::LiveryScheme Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQInteger tmp; sq_getinteger(vm, index, &tmp); return (ScriptCompany::LiveryScheme)tmp; } };
	template <> struct Return<ScriptCompany::LiveryScheme> { static inline int Set(HSQUIRRELVM vm, ScriptCompany::LiveryScheme res) { sq_pushinteger(vm, res); return 1; } };
	template <> struct Param<ScriptCompany::Colours> { static inline ScriptCompany::Colours Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQInteger tmp; sq_getinteger(vm, index, &tmp); return (ScriptCompany::Colours)tmp; } };
	template <> struct Return<ScriptCompany::Colours> { static inline int Set(HSQUIRRELVM vm, ScriptCompany::Colours res) { sq_pushinteger(vm, res); return 1; } };
	template <> struct Param<ScriptCompany::ExpensesType> { static inline ScriptCompany::ExpensesType Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQInteger tmp; sq_getinteger(vm, index, &tmp); return (ScriptCompany::ExpensesType)tmp; } };
	template <> struct Return<ScriptCompany::ExpensesType> { static inline int Set(HSQUIRRELVM vm, ScriptCompany::ExpensesType res) { sq_pushinteger(vm, res); return 1; } };

	/* Allow ScriptCompany to be used as Squirrel parameter */
	template <> struct Param<ScriptCompany *> { static inline ScriptCompany *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptCompany *)instance; } };
	template <> struct Param<ScriptCompany &> { static inline ScriptCompany &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptCompany *)instance; } };
	template <> struct Param<const ScriptCompany *> { static inline const ScriptCompany *Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return  (ScriptCompany *)instance; } };
	template <> struct Param<const ScriptCompany &> { static inline const ScriptCompany &Get(HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, nullptr); return *(ScriptCompany *)instance; } };
	template <> struct Return<ScriptCompany *> { static inline int Set(HSQUIRRELVM vm, ScriptCompany *res) { if (res == nullptr) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "Company", res, nullptr, DefSQDestructorCallback<ScriptCompany>, true); return 1; } };
} // namespace SQConvert
