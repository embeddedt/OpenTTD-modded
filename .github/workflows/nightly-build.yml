name: Build nightly binaries

on: [push]

jobs:
  build-nightlies:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019, ubuntu-18.04, ubuntu-20.04]
    
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          libfontconfig-dev \
          libicu-dev \
          liblzma-dev \
          liblzo2-dev \
          libsdl1.2-dev \
          libsdl2-dev \
          libxdg-basedir-dev \
          zlib1g-dev \
          # EOF
    - name: Prepare vcpkg (with cache)
      uses: lukka/run-vcpkg@v4
      if: runner.os == 'Windows'
      with:
        vcpkgDirectory: 'c:/vcpkg'
        doNotUpdateVcpkg: true
        vcpkgArguments: 'liblzma libpng lzo zlib'
        vcpkgTriplet: 'x64-windows-static'
    - name: configure
      run: mkdir cmbuild && cd cmbuild && cmake -DCMAKE_DISABLE_FIND_PACKAGE_ICU=TRUE ..
    - name: build
      run: cmake --build cmbuild
    - uses: actions/upload-artifact@v2
      if: runner.os == 'Linux'     
      with:
        name: ${{ matrix.os }}
        path: |
          cmbuild/openttd
          cmbuild/lang/
          cmbuild/ai/
          cmbuild/scripts/
    - uses: actions/upload-artifact@v2
      if: runner.os == 'Windows'     
      with:
        name: windows-binary
        path: |
          cmbuild/openttd.exe
          cmbuild/lang/
          cmbuild/ai/
          cmbuild/scripts/
  linux-generic:
    name: Build generic linux binary

    runs-on: ubuntu-20.04
    container:
      # manylinux2014 is based on CentOS 7, but already has a lot of things
      # installed and preconfigured. It makes it easier to build OpenTTD.
      image: quay.io/pypa/manylinux2014_x86_64

    steps:
    - name: Download source
      uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        echo "::group::Install dependencies"
        yum install -y \
          fontconfig-devel \
          freetype-devel \
          libicu-devel \
          libpng-devel \
          libpng-devel \
          lzo-devel \
          SDL2-devel \
          wget \
          xz-devel \
          zlib-devel \
          # EOF
        echo "::endgroup::"
        # The yum variant of fluidsynth depends on all possible audio drivers.
        # This is not really useful for us, as that would require a user to
        # have them all before he can start OpenTTD. Instead, compile a
        # version that can only use SDL2. As OpenTTD does sound via SDL2,
        # this simply means we either have sound and music, or have none.
        echo "::group::Install fluidsynth"
        wget https://github.com/FluidSynth/fluidsynth/archive/v2.1.6.tar.gz
        tar xf v2.1.6.tar.gz
        (
          cd fluidsynth-2.1.6
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=/usr
          make -j$(nproc)
          make install
        )
        echo "::endgroup::"
    - name: Install GCC problem matcher
      uses: ammaraskar/gcc-problem-matcher@master

    - name: Build
      run: |
        mkdir -p generic_build
        cd generic_build
        echo "::group::CMake"
        cmake ${GITHUB_WORKSPACE} \
          -DCMAKE_BUILD_TYPE=RelWithDebInfo \
          -DOPTION_PACKAGE_DEPENDENCIES=ON \
          # EOF
        echo "::endgroup::"
        echo "::group::Build"
        echo "Running on $(nproc) cores"
        make -j$(nproc) package
        echo "::endgroup::"
        # Remove the sha256 files CPack generates; we will do this ourself at
        # the end of this workflow.
        rm -f bundles/*.sha256
    - name: Store bundles
      uses: actions/upload-artifact@v2
      with:
        name: openttd-linux-generic
        path: generic_build/bundles
